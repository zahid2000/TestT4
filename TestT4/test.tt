<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>


   
   <# 
 IServiceProvider serviceProvider = (IServiceProvider)this.Host;
 var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE; 
 var solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)"); 
 var projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
 var vsProject = projectItem.ContainingProject; 
 var directory=Path.Combine(solutionsPath, vsProject.Name); 

  string ModelDirectory=Path.Combine(directory, "Models"); 

        if (!Directory.Exists(ModelDirectory))
        {
            Directory.CreateDirectory(ModelDirectory);
        }
#>
<#
const string connection = "server=CANR2-10\\SQLEXPRESS;database=Northwind ;Integrated Security=True;MultipleActiveResultSets=True;";
SqlConnection con = new SqlConnection(connection);
SqlCommand cmd = new SqlCommand("SELECT * FROM sys.tables", con);

if (con.State == System.Data.ConnectionState.Closed)
    con.Open();
    SqlDataReader dr = cmd.ExecuteReader();
        while (dr.Read())
        {
            string modelName=dr[0].ToString().Replace(" ", "");
            string path=Path.Combine(ModelDirectory, $"{modelName}.cs");

            StringBuilder model=new StringBuilder();
            model.Append("namespace TestT4.Models\n{\n\tpublic class ");
            model.Append(modelName);
            model.Append("\n\t{\n");

            SqlCommand propCommand = new SqlCommand($"SELECT COLUMN_NAME,DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{dr[0]}' ORDER BY ORDINAL_POSITION", con);
            SqlDataReader propName = propCommand.ExecuteReader();
                while (propName.Read())
                {
                    SqlDbType type = (SqlDbType)Enum.Parse(typeof(SqlDbType), propName[1].ToString(), true);
                    model.Append("\t\tpublic "+GetType(type)+" "+propName[0]+" { get; set; }\n");
                }
            propName.Close();
            model.Append("\n\t}\n\n}");
            CreateModel( path,  model.ToString());
        }
dr.Close();
con.Close();
#>

<# 
void CreateModel(string path, string model)
{
   File.WriteAllText(path, model);
}
  #>

  <# string GetType(SqlDbType type)
{
    switch (type)
    {
        case SqlDbType.Int:
            return "int";
            break;
        case SqlDbType.Float:
            return "float";
            break;
        case SqlDbType.Char:
        case SqlDbType.NChar:
        case SqlDbType.NText:
        case SqlDbType.NVarChar:
        case SqlDbType.Text:
        case SqlDbType.VarChar:
        case SqlDbType.Xml:
            return "string";
            break;
        case SqlDbType.Decimal:
        case SqlDbType.Money:
        case SqlDbType.SmallMoney:
            return "decimal";
            break;
        case SqlDbType.SmallInt:
            return "short";
            break;
        case SqlDbType.DateTime:
        case SqlDbType.SmallDateTime:
        case SqlDbType.Date:
        case SqlDbType.Time:
        case SqlDbType.DateTime2:
            return "DateTime";
            break;
        case SqlDbType.BigInt:
            return "long";

        case SqlDbType.Binary:
        case SqlDbType.Image:
        case SqlDbType.Timestamp:
        case SqlDbType.VarBinary:
            return "byte[]";

        case SqlDbType.Bit:
            return "bool";

        default:
            return "object";
            break;
    }
}  #>